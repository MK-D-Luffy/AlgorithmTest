<application>
  <component name="AppStorage">
    <histories>
      <item value="/** * Returns the index within this string of the first occurrence of the * specified substring. * * &lt;p&gt;The returned index is the smallest value {@code k} for which: * &lt;pre&gt;{@code * this.startsWith(str, k) * }&lt;/pre&gt; * If no such value of {@code k} exists, then {@code -1} is returned. * * @param str the substring to search for. * @return the index of the first occurrence of the specified substring, * or {@code -1} if there is no such occurrence. */" />
      <item value="Scheme" />
      <item value="get Context Path" />
      <item value="stock" />
      <item value="set Max Inactive Interval" />
      <item value="invalidate" />
      <item value="// Dump array back into list // instead of using a raw type here, it's possible to capture // the wildcard but it will require a call to a supplementary // private method" />
      <item value="Invocation Target Exception" />
      <item value="field Name" />
      <item value="field" />
      <item value="is Form Field" />
      <item value="* Wrap the &lt;code&gt;ResultSet&lt;/code&gt; in a decorator before processing it. * This implementation returns the &lt;code&gt;ResultSet&lt;/code&gt; it is given * without any decoration." />
      <item value="Wrap the &lt;code&gt;ResultSet&lt;/code&gt; in a decorator before processing it. * This implementation returns the &lt;code&gt;ResultSet&lt;/code&gt; it is given * without any decoration." />
      <item value="* Fill the &lt;code&gt;PreparedStatement&lt;/code&gt; replacement parameters with * the given objects." />
      <item value="Returns a string representation of the &quot;deep contents&quot; of the specified * array. If the array contains other arrays as elements, the string * representation contains their contents and so on. This method is * designed for converting multidimensional arrays to strings." />
      <item value="a the array whose string representation to return" />
      <item value="the array whose string representation to return" />
      <item value="Generic Servlet" />
      <item value="WARNING: An illegal reflective access operation has occurred WARNING: Illegal reflective access by org.dom4j.io.SAXContentHandler (file:/C:/Users/Administrator/IdeaProjects/Javaweb/05_XML/libs/dom4j-1.6.1.jar) to method com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$LocatorProxy.getEncoding() WARNING: Please consider reporting this to the maintainers of org.dom4j.io.SAXContentHandler WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations WARNING: All illegal access operations will be denied in a future release" />
      <item value="Sibling" />
      <item value="Minimal Elements" />
      <item value="extension.ParameterResolutionException: No ParameterResolver registered for parameter [int arg0] in constructor [HomeWorkTest5$MyInteger(int)]." />
      <item value="An array of query replacement parameters. Each row in * this array is one set of batch replacement values." />
      <item value="* Execute a batch of SQL INSERT, UPDATE, or DELETE queries. * * @param conn The Connection to use to run the query. The caller is * responsible for closing this Connection. * @param sql The SQL to execute. * @param params An array of query replacement parameters. Each row in * this array is one set of batch replacement values. * @return The number of rows updated per statement. * @throws SQLException if a database access error occurs * @since DbUtils 1.1" />
      <item value="Can not call newInstance() on the Class for java.lang.Class" />
      <item value="durability" />
      <item value="durablity" />
      <item value="isolation" />
      <item value="consistency" />
      <item value="atomicity" />
      <item value="Batch" />
      <item value="* Accepts a function that extracts a {@link java.lang.Comparable * Comparable} sort key from a type {@code T}, and returns a {@code * Comparator&lt;T&gt;} that compares by that sort key. * * &lt;p&gt;The returned comparator is serializable if the specified function * is also serializable. *" />
      <item value="j计算" />
      <item value="calucate" />
      <item value="transactions" />
      <item value="encrypt" />
      <item value="加密" />
      <item value="Filed" />
      <item value="Instantiation Exception" />
      <item value="Illegal Access Exception" />
      <item value="* @deprecated This method propagates any exception thrown by the * nullary constructor, including a checked exception. Use of * this method effectively bypasses the compile-time exception * checking that would otherwise be performed by the compiler. * The {@link * java.lang.reflect.Constructor#newInstance(java.lang.Object...) * Constructor.newInstance} method avoids this problem by wrapping * any exception thrown by the constructor in a (checked) {@link * java.lang.reflect.InvocationTargetException}." />
      <item value="strictfp" />
      <item value="ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;" />
      <item value="Fields" />
      <item value="write Fields" />
      <item value="balance" />
      <item value="interest" />
      <item value="ASCII" />
      <item value="the number of bytes to write." />
      <item value="* The number of valid bytes in the buffer. This value is always * in the range {@code 0} through {@code buf.length}; elements * {@code buf[0]} through {@code buf[count-1]} contain valid * byte data." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="74" />
        <entry key="ENGLISH" value="75" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="AMHARIC" value="1" />
        <entry key="ESTONIAN" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="KAZAKH" value="1" />
        <entry key="ROMANIAN" value="2" />
        <entry key="MALAGASY" value="1" />
        <entry key="MARATHI" value="1" />
        <entry key="IGBO" value="1" />
        <entry key="VIETNAMESE" value="4" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>